import serial
import serial.tools.list_ports
import time
import random
import math

# Lista portas e escolhe manualmente
print("Portas encontradas:")
for p in serial.tools.list_ports.comports():
    print(f"  {p.device} -> {p.description}")

# Ajuste aqui para a porta correta
ser = None
porta = 'COM7'
baud  = 9600
try:
    try:
        ser = serial.Serial(porta, baud, timeout=1)
        time.sleep(2)
        print(f"Conectado em {porta} a {baud} bps")
        # Exemplo de comando
        ser.write(b'D')

    except Exception as e:
        print("Erro ao abrir porta serial:", e)
        
    def criar_matriz(menu):
        matriz = []
        if menu == 1:
            for i in range(10):
                linha = [False]*10
                matriz.append(linha)
        elif menu == 2:
            for i in range(16):
                linha = [False]*16
                matriz.append(linha)         
        return matriz

    def indicador_visitado(matriz, x ,y):
        matriz[x][y] = True

    def imprimir_matriz(matriz):
        for i, linha in enumerate(matriz):
            for j, valor in enumerate(linha):
                print(f"|x:{i}y:{j}={valor}|", end='  ')
            print()

    def andar(i, j, matriz, vidas, pontos, ser):
        x = i
        y = j
        while x > 0:
            ser.write(b'F')
            time.sleep(3)
            x= x-1
            print(x)
        ser.write(b'E')
        time.sleep(3)
        while y > 0:
            ser.write(b'F')
            time.sleep(3)
            y= y-1
        if matriz[i][j] == True:
            print(matriz[i][j])
            ser.write(b'D')
            time.sleep(3)
            vidas = vidas - 1
        else:
            ser.write(b'S')
            time.sleep(3)
            pontos = pontos + 1
        voltar_inicio(i, j, ser)
        return(vidas, pontos)
def voltar_inicio (i, j, ser):
 x = i
 y = j
 ser.write(b'E')
 time.sleep(5)
 ser.write(b'E')
 time.sleep(5)
 
 while y > 0:
 ser.write(b'F')
 time.sleep(4)
 y= y-1
 ser.write(b'R')
 time.sleep(4)
 while x > 0:
 ser.write(b'F')
 time.sleep(4)
 x= x-1
 ser.write(b'E')
 time.sleep(5)
 ser.write(b'E')
 time.sleep(5)
 
 def achar_bomba(matriz, ser):
 vidas = 3
 pontos = 0
 nome = input("Digite seu nome de jogador: ")
 
        while vidas > 0:
            print(f"{nome} você tem: {vidas} vidas e {pontos} pontos!!!")
            i = int(input("Digite uma posição de 0 até 9 para x: "))
            j = int(input("Digite uma posição de 0 até 9 para y: "))
        
            vidas, pontos = andar(i, j, matriz, vidas, pontos, ser)

    def marcar_func(matriz):
        
        tipo_func = int(input("1: Linear\n2: Logarítmica\n3: Exponencial\n"))
        
        if(tipo_func == 1):
            vetor1x = [0,1,2,3,4] 
            for x in vetor1x:
                y = (3*x+2)
                matriz[x][y] = True
        
        elif(tipo_func == 2):
            vetor2x = [0,1,3,7]
            for x in vetor2x:
                y = int(4 * math.log2(x + 1))
                print(y)
                matriz[x][y] = True
        
        elif(tipo_func == 3):
            vetor3x = [0,1,2,3]
            for x in vetor3x:
                y = (2**x)
                matriz[x][y] = True
        return(matriz)
    
    def mover_para(x_atual, y_atual, x_dest, y_dest):
        comandos = []
        dx = x_dest - x_atual
        dy = y_dest - y_atual

        # Mover no eixo X
        if dx > 0:
            comandos.extend(['F'] * dx)
            comandos.append('E')  # voltar a frente

        # Mover no eixo Y
        if dy > 0:
            comandos.extend(['F'] * dy)  # já está virado para frente
            comandos.append('R')  # voltar a frente
        comandos.append('S')
        return comandos
    
    def gerar_comandos(matriz):
        comandos = []
        pos_x, pos_y = 0, 0  # posição inicial
        for x in range(len(matriz)):
            for y in range(len(matriz[0])):
                if matriz[x][y]:
                    comandos.extend(mover_para(pos_x, pos_y, x, y))
                    pos_x, pos_y = x, y
                    
        return comandos

    def executar_comandos(comandos, ser):
        for direcao in comandos:
            ser.write(f"{direcao}".encode())
            time.sleep(2)
        time.sleep(2)
        print("Acabou a amostra de Y!!!")
    
    

    if __name__ == "__main__":
        menu = int(input("Digite 1 para jogo das bombas\nDigite 2 para Robô entregador:"))
        if menu == 1:
            matriz= criar_matriz(menu)
            imprimir_matriz(matriz)
            numBomba = int(input("Digite a quantidade de bombas que quer no mapa: "))
            while numBomba > 0:
                x = random.randint(1, 10)-1
                y = random.randint(1, 10)-1
                indicador_visitado(matriz, x, y)
                numBomba = numBomba - 1
            
            imprimir_matriz(matriz)
            achar_bomba(matriz, ser)
        elif menu == 2:
            matriz= criar_matriz(menu)
            imprimir_matriz(matriz)
            print()
            matriz = marcar_func(matriz)
            comandos = gerar_comandos(matriz)
            executar_comandos(comandos, ser)
              
finally:     
        if ser and ser.is_open:
            ser.close()
            print("Porta serial fechada com sucesso.")
